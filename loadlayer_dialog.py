# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PluginLoadDialog
                                 A QGIS plugin
 plugin to load a layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by eliecer
        email                : eliecer
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject
from qgis.core import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'loadlayer_dialog_base.ui'))


class PluginLoadDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PluginLoadDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.updateLabelText) # call function
        self.toolButton.clicked.connect(self.getOpenFilename) # function open file
        self.loadComboBoxLayers() #call function

    def updateLabelText(self):
        text = self.lineEdit.text()
        self.label.setText(text)

    def loadComboBoxLayers(self):
        self.comboBox.clear()
        layers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        self.comboBox.addItems(layers)

    def getOpenFilename(self):
        fn = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file')[0]
        self.lineEdit_2.setText(fn)

